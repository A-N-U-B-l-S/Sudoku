package Random_vaje;

public class Sudoku {
    private static final int grid_size = 9;

    public static void main(String[] args) {

        int[][] board = {
                {7, 0, 2, 0, 5, 0, 6, 0, 0},
                {0, 0, 0, 0, 0, 3, 0, 0, 0},
                {1, 0, 0, 0, 0, 9, 5, 0, 0},
                {8, 0, 0, 0, 0, 0, 0, 9, 0},
                {0, 4, 3, 0, 0, 0, 7, 5, 0},
                {0, 9, 0, 0, 0, 0, 0, 0, 8},
                {0, 0, 9, 7, 0, 0, 0, 0, 5},
                {0, 0, 0, 2, 0, 0, 0, 0, 0},
                {0, 0, 7, 0, 4, 0, 2, 0, 3}
        };

        if (solveBoard(board)){
            System.out.println("Reseno uspesno");
        }
        else{
            System.out.println("Neveljaven sudoku :(");
        }

        printBord(board);

    }

    private static void printBord(int[][] board) {
        for (int row = 0; row < grid_size; row++) {
            if (row % 3 == 0 && row != 0) {
                System.out.println("-----------");
            }
            for (int column = 0; column < grid_size; column++) {
                if (column % 3 == 0 && column != 0) {
                    System.out.print("|");
                }
                System.out.print(board[row][column]);
            }
            System.out.println();
        }
    }

    private static boolean numInRow(int[][] board, int number, int row){
        for (int i = 0; i < grid_size; i++) {
            if (board[row][i] == number){
                return true;
            }
        }
        return false;
    }

    private static boolean numInColumn(int[][] board, int number, int column){
        for (int i = 0; i < grid_size; i++) {
            if (board[i][column] == number){
                return true;
            }
        }
        return false;
    }

    private static boolean obstajaKvadrat(int[][] board, int number, int row, int column){
        int localBoxRow = row - row % 3;
        int localBoxColumn = column - column % 3;

        for (int i = localBoxRow; i < localBoxRow + 3; i++) {
            for (int j = localBoxColumn; j < localBoxColumn + 3; j++) {
                if (board[i][j] == number){
                    return true;
                }
            }
        }
        return false;
    }

    private static boolean validPlacement(int[][] board, int number, int row, int column){
        return !numInRow(board, number, row) &&
                !numInColumn(board, number, column) &&
                !obstajaKvadrat(board, number, row, column);
    }

    private static boolean solveBoard(int[][] board){
        for (int row = 0; row < grid_size; row++) {
            for (int column = 0; column < grid_size; column++) {
                if (board[row][column] == 0){
                    for (int numToTry = 1; numToTry <= grid_size; numToTry++) {
                        if (validPlacement(board, numToTry, row, column)){
                            board[row][column] = numToTry;

                            if (solveBoard(board)){
                                return true;
                            }else{
                                board[row][column] = 0;
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

}
